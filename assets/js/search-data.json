{
  
    
        "post0": {
            "title": "Images Hack",
            "content": "Saving PNG to GIF . import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . Fixing the scaling . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)+&quot; &quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa.png Original: 39392 302x265 images/pumpkin.png Scaled: 10497 100x87 images/tmp/pumpkin.png . . Changing the Color Scale . To change to different scaling, make the other color values 0 | . Grayscale . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); Color newColor = new Color(red+green+blue, red+green+blue, red+green+blue); // adding all of the colors image.setRGB(j,i,newColor.getRGB()); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } static public void main(String args[]) throws Exception { GrayScale obj = new GrayScale(); } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Red Scale . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0) + (col .getGreen() * 0))); // To change to different scaling, make the other color values 0 try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa.png Original: 39392 302x265 images/pumpkin.png Scaled: 10497 100x87 images/tmp/pumpkin.png . Blue Scale . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0) + (col.getBlue() * 0.59) + (col .getGreen() * 0))); // To change to different scaling, make the other color values 0 try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa.png Original: 39392 302x265 images/pumpkin.png Scaled: 10497 100x87 images/tmp/pumpkin.png . Green Scale . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0) + (col.getBlue() * 0) + (col .getGreen() * 0.11))); // To change to different scaling, make the other color values 0 try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa.png Original: 39392 302x265 images/pumpkin.png Scaled: 10497 100x87 images/tmp/pumpkin.png .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/10/09/images.html",
            "relUrl": "/jupyter/2022/10/09/images.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "List and ArrayList Lesson",
            "content": "Lists . Lists in java act as an interface to store and order objects and allow copies of values | Lists extend the collection class | Four subclasses - ArrayList - LinkedList - Vector - Stack . | ArrayList and LinkedList are the most commonly used | . public interface List&lt;E&gt; extends Collection&lt;E&gt; . ArrayLists . Size can be changed unlike with built-in arrays | . import java.util.ArrayList; ArrayList&lt;String&gt; delNorteMarketplace = new ArrayList&lt;String&gt;(); . Use the &quot;add&quot; command to add elements to the index | Use the &quot;addAll&quot; command to add all the elements listed to the index | . delNorteMarketplace.add(&quot;Blue Homecoming Dress&quot;); delNorteMarketplace.add(&quot;To Kill A Mockingbird book&quot;); . ArrayList&lt;String&gt; NewItems = new ArrayList&lt;String&gt;(); NewItems.add(&quot;Blue Homecoming Dress&quot;); NewItems.add(&quot;To Kill A Mockingbird book&quot;); delNorteMarketplace.addAll(NewItems); . To find how mny items are in the list utilize &quot;size()&quot; | To clear all the elements in the list utilize &quot;clear()&quot; | To remove the one of the index elements on the list usr &quot;remove&quot; | Use &quot;get&quot; to find a specific element in the list | . System.out.println(&quot;Del Norte Marketplace has&quot; + delNorteMarketplace.size() &quot;items&quot;) . NewItems.clear(); . dnMarketItems.remove(1); //removes To Kill A Mockingbird item . System.out.println(&quot;The first item listed is &quot; + delNorteMarketplace.get(0)); . &quot;indexOf&quot; returns the first occurance of the element | . System.out.println(&quot;The dress index is&quot; + delNorteMarketplace.indexOf(&quot;Blue Homecoming Dress&quot;)); . equals, shown by == shows if two items on a list are the same | . &quot;hasCode&quot; is used to return the hashcode value of the list | . System.out.println(&quot;The hashcode for Del Norte Marketplace is &quot; + delNorteMarketplace.hashCode()); . &quot;isEmpty&quot; is used to see if the particular list is empty | . System.out.println(&quot;There are no new items&quot; &quot; + NewItems.isEmpty()); . &quot;contains&quot; us ised to see of the list has a certain element | . System.out.println(&quot;The Del Norte Marketplace site has shoes&quot; + delNorteMarketplace.contains(&quot;shoes&quot;)); . &quot;sort&quot; is used to sort the elements in the list gtiven a condition | . Collections.sort(delNorteMarketplace); System.out.println(&quot;Sort&quot; + delNorteMarketplace); .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/10/09/d-arrays.html",
            "relUrl": "/jupyter/2022/10/09/d-arrays.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Bash Checks",
            "content": "python --version python2 --version python3 --version java --version conda --version javac --version jupyter kernelspec list conda list conda list | grep &quot;jupyter&quot; . Python 3.9.12 Python 2.7.18 Python 3.9.12 openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) conda 4.13.0 javac 11.0.16 Available kernels: bash /home/shraddha/.local/share/jupyter/kernels/bash java /home/shraddha/.local/share/jupyter/kernels/java javascript /home/shraddha/.local/share/jupyter/kernels/javascript python3 /home/shraddha/.local/share/jupyter/kernels/python3 # packages in environment at /home/shraddha/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/10/09/Bash-Check.html",
            "relUrl": "/jupyter/2022/10/09/Bash-Check.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "API Lesson",
            "content": "What are API&#39;s? . Working with APL and ASCii | API: (Application programming interface) a way for multiple computer programs to communcate with each other | EX: a weather station has a software to detect weather daily. This can be displayed on the weather app on your phone. The weather app communicates with the weather station&#39;s software program | RapidAPI: Used to connect API&#39;s | . Questions . What are the benefits of using API? | Make a way for different softwares/programs to communicate with each other | Make it easier to us the data from others | . Benefits of using backend development? | We can display data collected from other codes | Can be used in our group project | . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //RapidAPI header https://email-verifier-api.p.rapidapi.com/v2/ HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://email-verifier-api.p.rapidapi.com/v2/&quot;)) .header(&quot;x-rapidapi-key&quot;, &quot;92c856bffamsh4d4b153731a7d0ap179808jsn6ae68da3ab4c&quot;) .header(&quot;x-rapidapi-host&quot;, &quot;email-verifier-api.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //RapidAPI Body System.out.println(response.body()); .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/10/09/API-Lesson.html",
            "relUrl": "/jupyter/2022/10/09/API-Lesson.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Project Background/Design",
            "content": "Project Ideas . We had multiple ideas at the start but we narrowed it down to one . We had the idea to create an AP Lit website with an organized list of assignments and deadlines that included a place for AP Lit students to chat about different assignments and proects | We also had an idea to make a data collector for AP Stats where we are starting our first data collecting project | We also considered a website modeled after Goodreads but specifically for DNHS students to find and rate books | One of the final ideas we considered was a market place also soley for DNHS students for secondhand books and clothing. . | We decided on the marketplace as we had more ideas as to how to impliment the design properly . | . Interests . We all have different interests for why we wanted to do the project | Shraddha: Liked the fact that many single use items like dance dresses and ap test books would be able to be sold to others at Del Norte for future generations usage | .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/09/25/project-design.html",
            "relUrl": "/jupyter/2022/09/25/project-design.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "JavaScript Lesson",
            "content": "Basics of JavaScript . How to print a simple statement . console.log(&#39;Hello World.&#39;); //How to print &quot;Hello World&quot; . Hello World. . How to declare variables in JavaScript . You can declare a variable using the two statements below | NOTE: JavaScript is case sensitive like Java | . let newVariable; myVariable = &#39;Shraddha&#39;; . You can also declare a variable with one line of code | . let newVariable = &#39;Shraddha&#39;; . How to declare different types of variables . A string variable is used for a value, like a word Make sure to include single quotation marks | . | A number variable can be used by simply declaring the variable equal to the value of the number | Booleans, like in java, can be used by letting the variable equal either true or false | An Array can be used to store multiple values in one | You can store an object as a variable in JavaScript, which is a little different from in Java | . let newString = &#39;Shraddha&#39;; //String variable let newNumber = 5; //Number variable let newBoolean = true; //Boolean variable let newArray = [1, &#39;Shraddha&#39;. 5]; //Array variable let newObject = document.querySelector(&#39;a1&#39;); //Object as a variable . iJavaScript $$.async() . This is used to request synchronous code. This will then evaluate the code and be ready to get more requests | . $$.async(); console.log(&quot;Hello, World!&quot;); setTimeout($$.done, 1000) . Hello, World! . You can aso add a timer to print a line of code after a while | . $$.async(); console.log(&quot;Hello, World!&quot;); //How to print &quot;Hello World&quot; wih JavaScript var action = { $$: $$, console: console, }; setTimeout(function() { $$.clear(0); // clear output cell action.$$.sendResult(&quot;Goodbye!&quot;); }, 5000); // 5 second timer . &#39;Goodbye!&#39; . Building an Array with my Scrumtean . // define a student Array of Person(s) var students = [ new Person(&quot;Shraddha&quot;, &quot;ftc13184-SK&quot;, 2023), new Person(&quot;Pravavi&quot;, &quot;PranaviInukurti&quot;, 2023), new Person(&quot;Madhumita&quot;, &quot;mnarayan&quot;, 2023), new Person(&quot;Meena&quot;, &quot;MAnn, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Anthony&#39;, ghID: &#39;tonyhieu&#39;, classOf: 2022, role: &#39;Student&#39; }, Person { name: &#39;Bria&#39;, ghID: &#39;B-G101&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Allie&#39;, ghID: &#39;xiaoa0&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Tigran&#39;, ghID: &#39;Tigran7&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Rebecca&#39;, ghID: &#39;Rebecca-123&#39;, classOf: 2023, role: &#39;Student&#39; } ] string ; Mr M string ; {&quot;name&quot;:&quot;Mr M&quot;,&quot;ghID&quot;:&quot;jm1021&quot;,&quot;classOf&quot;:1977,&quot;role&quot;:&quot;Teacher&quot;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/09/25/java-script-trial.html",
            "relUrl": "/jupyter/2022/09/25/java-script-trial.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fibonacci Hack",
            "content": "Original Code Using Stream Interface . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Fibonacci Using For Loop . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected abstract void init(); /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { ForLoopFib forLoopFib = new ForLoopFib(); ForLoopFib.print(); } } public class ForLoopFib extends Fibo { protected void init() { super.name = &quot;ForLoop&quot;; System.out.println(&quot;For Loop.&quot;); long n = 0; long nMinusOne = 0; long nMinusTwo = 0; for( int i = 0; i &lt; super.size; i++) { if(i &gt; 0 &amp;&amp; n == 0) { n = 1; } else { n = nMinusOne + nMinusTwo; } super.setData(n); nMinusTwo = nMinusOne; nMinusOne = n; } } } Fibo.main(null); . Fibonnaci Using While Loop . * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected abstract void init(); protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { WhileLoopFib WhileLoopFib = new WhileLoopFib(); WhileLoopFib.print(); } } public class WhileLoopFib extends Fibo { protected void init() { long n = 0; long nMinusOne = 0; long nMinusTwo = 0; int i = 0; while( i &lt; this.size) { if(i &gt; 0 &amp;&amp; n == 0) { n = 1; } else { n = nMinusOne + nMinusTwo; } this.setData(n); nMinusTwo = nMinusOne; nMinusOne = n; i++; } } } Fibo.main(null); . Fibonacci using Recursion . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ absract public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected abstract void init(); protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { RecursionFibo RecursionFibo = new RecursionFibo(); RecursionFibo.print(); } } public class RecursionFibo extends Fibo { protected void init(int recursionNum, long nMinusOne, long nMinusTwo) { if(arr.length == 0) { this.setData(0); this.setData(1); recursionNum = recursionNum - 2; } if (recursionNum &gt; 0) { n = nMinusOne + nMinusTwo; this.setData(n); init(recursionNum - 1, n, nMinusOne); } } } Fibo.main(null); . CollegeBoard Standards . Skill 1.B: . Determine code that would be used to complete code segments (ie For, While, Recursion) -The fibanacci sequence is pretty complex to code. Using for and while loops as well as recursion in the actual code for a fibanacci sequence completes this standard | . Skill 4.C: . Determine if two or more code segments yield equivalent results (be sure to Discuss how you know results are the same) | With the for and while statements, the code goes through the loop to check equivalence in the code. If the results are the same, the code will move on, in a way | The &quot;this&quot; statement in the code also checks and ensures that there isn&#39;t code duplication | . Skill 5.A: . Describe the behavior of a given segment of program code (describe the difference in recursion versus for &amp; while loops, perhaps add timing to determine speed) | The comments on the code deomnostrate which loop is happening. Recursive loops are stronger and more powerful in that you can do more with them. While loops, on the other hand, are both simpler to make in most cases and are easier to read. Another difference is that recursions use function calls while iterations use the for and while loops. Recursions are faster and more efficient. | .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/09/25/fibonacci.html",
            "relUrl": "/jupyter/2022/09/25/fibonacci.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Agile Hack",
            "content": "",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/09/19/agile-hacks.html",
            "relUrl": "/jupyter/2022/09/19/agile-hacks.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "2021 Practice FRQ",
            "content": "2021 Practice FRQ: Problem 1 . a) Write the WordMatch method scoreGuess. To determine the score to be returned, scoreGuess finds the number of times that guess occurs as a substring of secret and then multiplies that number by the square of the length of guess. Occurrences of guess may overlap within secret. Assume that the length of guess is less than or equal to the length of secret and that guess is not an empty string. . public class WordMatch { /** The secret string. */ private String secret; /** Constructs a WordMatch object with the given secret string of lowercase letters. */ public WordMatch(String word) { /* implementation not shown */ } /** Returns a score for guess, as described in part (a). * Precondition: 0 &lt; guess.length() &lt;= secret.length() */ public int scoreGuess(String guess) { int result = 0; for (int a = 0; a &lt; secret.length(); a++) { if(secret.substring(a).indexOf(guess) == 0) { result++; } } return result * guess.length() * guess.length(); } } . b) Write the WordMatch method findBetterGuess, which returns the better guess of its two String parameters, guess1 and guess2. If the scoreGuess method returns different values for guess1 and guess2, then the guess with the higher score is returned. If the scoreGuess method returns the same value for guess1 and guess2, then the alphabetically greater guess is returned. The following example shows a declaration of a WordMatch object and the outcomes of some possible calls to the scoreGuess and findBetterGuess methods. WordMatch game = new WordMatch(&quot;concatenation&quot;); . // public int scoreGuess(String guess) // { /* to be implemented in part (a) */ } /** Returns the better of two guesses, as determined by scoreGuess and the rules for a * tie-breaker that are described in part (b). * Precondition: guess1 and guess2 contain all lowercase letters. * guess1 is not the same as guess2. */ public String findBetterGuess(String guess1, String guess2) { if(scoreGuess(guess1)&gt;scoreGuess(guess2)) { return guess1; } if(scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if(guess1.compareTo(guess2) &gt; 0 ) { return guess1; } return guess2; } . Scoring Guidlines . Part A . compare guess to substring of secret | Uses of substring secret with correct length for comparison with guess | Loops through all necessary substrings of secret | Counts number of identified occurences of guess within secret | Calculate and returns correct final score (algorithm) . | Notes: We believe we would earn a 5/5, full credit, for this part because we completed all of the elements of the point guidlines. At first, we forgot the return statement, but we were able to problem solve and fix this. It was also hard to get the correct syntax down while we were working with new elements in Java . | . Part B . Calls scoreGuess to get scores for guess1 and guess2 | Compares the scores | Determines which guess1 and guess2 is alphabetically greater | Returns the identified guess1 or guess2 (algorithm) . | Notes: After some problem solving we believe we earned full credit. We found this part to be a little easier since it was simple if statements that we had learned previously. . | .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/09/15/FRQ-1.html",
            "relUrl": "/jupyter/2022/09/15/FRQ-1.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Monkey Array Practice",
            "content": "class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿)&quot;, //[0][0] eyes &quot; _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ &quot;, //[0][1] chin &quot; --0-- ++1++ &lt;-2-&gt; ==3== ==4== &quot;, //[0][2] body &quot; ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ &quot;, //[0][3] legs &quot;Five little monkeys jumping on the bed.&quot;, }, //Monkey 1 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[0][0] eyes &quot; _⏄_/ _⎏_/ _⎐_/ _⍾_/&quot;, //[0][1] chin &quot; --0-- ++1++ &lt;-2-&gt; ==3== &quot;, //[0][2] body &quot; ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ &quot;, //[0][3] legs &quot;Four little monkeys jumping on the bed.&quot;, }, //Monkey 2 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ&quot;, //[0][0] eyes &quot; _⏄_/ _⎏_/ _⎐_/&quot;, //[0][1] chin &quot; --0-- ++1++ &lt;-2-&gt; &quot;, //[0][2] body &quot; ⎛ ⎞ ⌋ ⌊ 〈 〉 &quot;, //[0][3] legs &quot;Three little monkeys jumping on the bed.&quot;, }, //Monkey 3 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ&quot;, //[0][0] eyes &quot; _⏄_/ _⎏_/&quot;, //[0][1] chin &quot; --0-- ++1++ &quot;, //[0][2] body &quot; ⎛ ⎞ ⌋ ⌊ &quot;, //[0][3] legs &quot;Two little monkeys jumping on the bed.&quot;, }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot;, //[4][3] &quot;One little monkey jumping on the bed.&quot;, }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int col = 0; col &lt; monkeyCount; col++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int row = 0; row &lt; monkeys[col].length; row++) { // prints specific part of the monkey from the column System.out.print(monkeys[col][row] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ Five little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ Four little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 Three little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ Two little monkeys jumping on the bed. (◕‿◕✿) _⍾_/ ==4== _/ _ One little monkey jumping on the bed. 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ Five little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ Four little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 Three little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ Two little monkeys jumping on the bed. 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ Five little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ Four little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 Three little monkeys jumping on the bed. 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ Five little monkeys jumping on the bed. ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ Four little monkeys jumping on the bed. 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ Five little monkeys jumping on the bed. No more monkeys jumping on the bed THE END .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/09/13/monkey-2darray.html",
            "relUrl": "/jupyter/2022/09/13/monkey-2darray.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Boolean Expressions and If Statement Lesson",
            "content": "Boolean Expressions . Boolean expressions are used to illustrate true or false statements in code. They use a data type called boolean to format the code. | . import java.util.Scanner; public class Booleans //define class { public static void main(String[] args) //java main method { boolean isSunny = true; //declare the boolean variables boolean isRainy = false; if (isSunny) { System.out.println(&quot;It is sunny.&quot;); } else { System.out.println(&quot;It is rainy.&quot;); } } } Booleans.main(null); . It is sunny. . If else Statements . If else statements are used in Java to execute a certain action if certain conditions are met. If the conditions are not met, there may be an &quot;else&quot; statement to perform a different action. | . If statements can be simple or complex in nature. Here is an example of a simple if statement | . import java.util.Scanner; public class Test //define class { public static void main(String[] args) //java main method { int num = 10; //declare the integer variable if (num &gt; 2) //if statement format with parameters { System.out.println(&quot;The number is greater than 2&quot;); //if the number is greater than zero, print this statement. } } } Test.main(null); . The number is greater than 2 . If statements often use else statements to specify what the code should do if the first condition is not met. | . import java.util.Scanner; public class Else { public static void main(String[] args) { int num = 1; if (num &gt; 2) { System.out.println(&quot;The number is greater than 2&quot;); } else //the computer will run this portion if the number is less than or equal to 2 { System.out.println(&quot;The number is not greater than 2&quot;); //This is what the computer will print } } } Else.main(null); . The number is not greater than 2 . Switch Statements . Switch statements can be used in adition to if-else statements to switch between different commands in code. For exmple, a user can enter whitch case they would like to run or that computer will go through all of the switches. | . import java.util.Scanner; public class switchExample { public static void main(String[] args) { int num = 1; switch(num) { case 1: if (num &gt; 2) { System.out.println(&quot;The number is greater than 2&quot;); } else //the computer will run this portion if the number is less than or equal to 2 { System.out.println(&quot;The number is not greater than 2&quot;); //This is what the computer will print } case 2: if (num &gt; 3) { System.out.println(&quot;The number is greater than 3&quot;); } else //the computer will run this portion if the number is less than or equal to 2 { System.out.println(&quot;The number is not greater than 3&quot;); //This is what the computer will print } case 3: if (num &gt; 7) { System.out.println(&quot;The number is greater than 7&quot;); } else //the computer will run this portion if the number is less than or equal to 2 { System.out.println(&quot;The number is not greater than 7&quot;); //This is what the computer will print } case 4: if (num &lt; 3) { System.out.println(&quot;The number is less than 3&quot;); } else //the computer will run this portion if the number is less than or equal to 2 { System.out.println(&quot;The number is greater than 3&quot;); //This is what the computer will print } case 5: if (num &gt; 4) { System.out.println(&quot;The number is not greater than 4&quot;); } else //the computer will run this portion if the number is less than or equal to 2 { System.out.println(&quot;The number is greater than 4&quot;); //This is what the computer will print } case 6: System.out.println(&quot;Thanks for running this code.&quot;); } } } switchExample.main(null); . The number is not greater than 2 The number is not greater than 3 The number is not greater than 7 The number is less than 3 The number is greater than 4 Thanks for running this code. . De Morgan&#39;s Law . De Morgan&#39;s Law is a way to negate &quot;and&quot; or &quot;or&quot; statements in code. Below is a demonstration on how the law works | . import java.util.Scanner; public class deMorgan //define class { public static void main(String[] args) //java main method { int a = 0; //initializing variables int b = 0; System.out.println(!(a==10 || b==10)); //Will print true if a or b does not equal 10 System.out.println(a!=10 &amp;&amp; b!=10); } } deMorgan.main(null); . true true . De Morgan&#39;s law can be used in other code. For example between different foods. | . import java.util.Scanner; public class deMorganExample //define class { public static void main(String[] args) //java main method { String food = &quot;pasta&quot;; String food2 = &quot;pizza&quot;; if (!(food.equals(&quot;pizza&quot;) || food.equals(&quot;bread&quot;))) // Makes !(false value == true value) { System.out.println(&quot;The food is not pasta or pizza.&quot;); //Will print this } else // if not { System.out.print(&quot;Food type is pasta or pizza.&quot;); //Will print this } } } deMorganExample.main(null); . Food is not pasta or pizza. .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/09/11/if-else-lesson.html",
            "relUrl": "/jupyter/2022/09/11/if-else-lesson.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Docker server",
            "content": "",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/markdown/2022/09/11/docker-server.html",
            "relUrl": "/markdown/2022/09/11/docker-server.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Team Console",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Temp Converter (Shraddha)&quot;); System.out.println(&quot;5 - GPA Calculator (Meena)&quot;); System.out.println(&quot;6 - Simple Calculator(Pranavi)&quot;); System.out.println(&quot;7 - Statistics Calculator (Madhumita)&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: Scanner keyboard = new Scanner(System.in); System.out.println(&quot;Enter in 1 to convert from Fahrenheit to Celsius or 2 to convert from Celsius to Fahrenheit.&quot;); int conversionDeterminer = keyboard.nextInt(); System.out.println(&quot;Please enter a temperature.&quot;); int originalTemp = keyboard.nextInt(); double convertedTemp; if(conversionDeterminer == 1) { convertedTemp = (originalTemp - 32) * (5.0/9); System.out.println(convertedTemp); } else if(conversionDeterminer == 2) { convertedTemp = originalTemp * (9.0/5) + 32; System.out.println(convertedTemp); } else { System.out.println(&quot;Sorry, that input is not valid. Please try running the program again.&quot;); } break; case 5: System.out.println(&quot;GPA Calculator&quot;); System.out.println(&quot;Code by Meena Annamalai&quot;); int count = -1; Scanner input; boolean exitProgram = false; input = new Scanner(System.in); System.out.print(&quot;How many course would you like to enter? &quot;); int numCourses = input.nextInt(); System.out.println(numCourses); input.close(); int[] gradePoints = new int[numCourses]; int[] creditHours = new int[numCourses]; for (int i = 0; i &lt; numCourses; i++) { // get course input = new Scanner(System.in); System.out.print(&quot; nEnter a course, type 0 to exit: &quot;); /** Wrapper class object string is used here since the user enters the course name **/ String course = input.nextLine(); System.out.println(course); input.close(); if (course.equals(&quot;0&quot;)) { exitProgram = true; System.out.println(&quot;Bye!&quot;); break; } //compound assignment operator used here - the result is that the count is increased by 1 each time the loop runs count += 1; // get credits input = new Scanner(System.in); System.out.print(&quot;Enter the number of credits for that course: &quot;); /** primitive data type: an integer is used here since the number of credits will later be used for calculations so a string shouldn&#39;t be used and since the credit number will always be a whole number, an integer data type can be used **/ int credits = input.nextInt(); System.out.println(credits); input.close(); // get letter grade input = new Scanner(System.in); System.out.print(&quot;Enter the letter grade you got: &quot;); /** Wrapper class object string is used here since the user enters the letter grade they got which will then be matched with the corresponding point value with the below switch statement **/ String letterGrade = input.nextLine(); System.out.println(letterGrade); input.close(); int pointValue = 0; //convert letter grade to gpa switch (letterGrade) { case &quot;A&quot;: pointValue = 4; break; case &quot;B&quot;: pointValue = 3; break; case &quot;C&quot;: pointValue = 2; break; case &quot;D&quot;: pointValue = 1; break; case &quot;F&quot;: pointValue = 0; break; } creditHours[count] = credits; gradePoints[count] = pointValue * credits; } int totalGradePoints = 0; for (int i = 0; i &lt; gradePoints.length; i++) { totalGradePoints += gradePoints[i]; } int totalAttemptedCredits = 0; for (int i = 0; i &lt; creditHours.length; i++) { totalAttemptedCredits += creditHours[i]; } //here the Primitive data type boolean is used since I only want the final gpa to be shown if the user doesn&#39;t exit the program if (exitProgram == false) { //here the primitive data type double is used since the the total grade pts divided by the total attempted credits will not always be a whole number //casting is also used for this reason as both variables were originally integers double gpa = (double) totalGradePoints / (double) totalAttemptedCredits; System.out.println(&quot;Your GPA is: &quot; + String.valueOf(gpa)); System.out.println(&quot;Bye! Thank you for using GPA Calculator&quot;); break; } //ScanPrimitives.main(null); break; case 6: System.out.println(&quot;Simple Calculator&quot;); System.out.println(&quot;Code by Pranavi Inukurti&quot;); Scanner Scan = new Scanner(System.in); System.out.println(&quot; n Please enter two numbers&quot;); int xe; int xo; System.out.print(&quot; n First number: &quot;); xe = Scan.nextInt(); System.out.print(&quot; n Second number: &quot;); xo = Scan.nextInt(); System.out.println(&quot; n Select between (*,/,+,-) n Type out the character in a single letter: &quot;); String Operation = Scan.next(); String EO = &quot;You have selected &quot;; switch (Operation) { case &quot;*&quot;: System.out.println(EO + &quot;* n Your Result: &quot;+( xe * xo )); break; case &quot;/&quot;: System.out.println(EO + &quot;/ n Your Result: &quot;+ ( xe / xo )); break; case &quot;+&quot;: System.out.println(EO + &quot;+ n Your Result: &quot;+ ( xe + xo ));break; case &quot;-&quot;: System.out.println(EO + &quot;- n Your Result: &quot;+( xe - xo )); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); //Close Scan.close(); System.out.println(&quot; Closing Application &quot;); } break; case 7: ArrayList&lt;Double&gt; data = new ArrayList&lt;&gt;(); Scanner statisticsInput = new Scanner(System.in); System.out.print(&quot;Enter an numerical datapoint, type a non-numerical value to exit: n&quot;); while(true) { try { double userInput = statisticsInput.nextDouble(); System.out.println(userInput); data.add(userInput); } catch (Exception e) { statisticsInput.close(); break; } } //find mean double total = 0; for (double num : data) { total += num; } double mean = total/data.size(); //find standard deviation double standardDeviation = 0; for (double num : data) { standardDeviation += Math.pow(num - mean, 2); } standardDeviation = Math.sqrt(standardDeviation/(data.size() - 1)); //find min double min = data.get(0); for (double num : data) { if (num &lt; min) { min = num; } } //find max double max = data.get(0); for (double num : data) { if (num &gt; max) { max = num; } } System.out.println(&quot;Mean: &quot; + mean); System.out.println(&quot;Max: &quot; + max); System.out.println(&quot;Min: &quot; + min); System.out.println(&quot;Standard Deviation: &quot; + standardDeviation); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Temp Converter (Shraddha) 5 - GPA Calculator (Meena) 6 - Simple Calculator(Pranavi) 7 - Statistics Calculator (Madhumita) 0 - Quit - 1: Hello, World! 4: Enter in 1 to convert from Fahrenheit to Celsius or 2 to convert from Celsius to Fahrenheit. Please enter a temperature. -6.666666666666667 0: Goodbye, World! .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/09/06/team-Console.html",
            "relUrl": "/jupyter/2022/09/06/team-Console.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Statistics Calculator",
            "content": "import java.util.Scanner; public class newCalculator { public static void main(String[] args) { Scanner keyboard = new Scanner(System.in); System.out.println(&quot;Please enter a number.&quot;); int n=keyboard.nextInt(); double[] input=new double[n]; double sum = 0,mean; System.out.println(&quot;enter n elements&quot;); for(int i=0; i&lt;n ;i++) { input[i]=keyboard.nextDouble(); sum=sum+input[i]; } mean = sum/n; System.out.println(&quot;Mean = &quot;+mean); sum = 0; for(int i = 0; i&lt;n; i++) { sum+=Math.pow((input[i]-mean),2); } mean = sum/(n-1); double SD = Math.sqrt(mean); System.out.println(&quot;Standard Deviation = &quot;+ SD); } } newConsole.main(null); .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/09/05/console.html",
            "relUrl": "/jupyter/2022/09/05/console.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "APCSA Notes",
            "content": ". APCSA Notes . Introduction . Computer Science A is a course that is broken into 10 units. Below are the units and some notes for each of them. . Unit 1: Primative Types . boolean: true or false | byte: complement integer | char: one code character | short: twos complement integer | int: integer | long: complement integer | float: decimal values up to 7 digits | double: decimal values up to 16 digits | . Unit 2: Using Objects . Java is object-oriented programming (OOP) | Class is used to define a new data type | Class can be compared to a cookie cutter which makes the cookies (objects) | Each class has its own attributes and behaviors | Objects are created in class and are often knwon as instances of a class | . Unit 3: Boolean Expressions and if Statements . Boolean expressions are used to check if something is true or false | . import java.util.Scanner; public class Booleans //define class { public static void main(String[] args) //java main method { boolean isSunny = true; //declare the boolean variables boolean isRainy = false; if (isSunny) { System.out.println(&quot;It is sunny.&quot;); } else { System.out.println(&quot;It is rainy.&quot;); } } } Booleans.main(null); . It is sunny. . If statements are used to check if a condition is met. If a condition is met, the code will do something. Else statements can be used with if statements to tell the code to do something if the first condition is not met | . import java.util.Scanner; public class Else { public static void main(String[] args) { int num = 1; if (num &gt; 2) { System.out.println(&quot;The number is greater than 2&quot;); } else //the computer will run this portion if the number is less than or equal to 2 { System.out.println(&quot;The number is not greater than 2&quot;); //This is what the computer will print } } } Else.main(null); . The number is not greater than 2 . Unit 4: Iteration . Repeating actions until a specific condition is met | Three types of iterations For Loops | While Loops | Recursions ## Unit 5: Writing Class | . | Includes Instance variables: stores information about an object created in a class | Constructors: create new objects | Methods: show the program a new command; you can write specific methods into your classes ## Unit 6: Array | . | Used for storing multiple values in one variable -square brackete [] used to declare | commas in between curly brackets to store an array (EX: String[] colors = {&quot;blue&quot;, &quot;red&quot; , &quot;orange}) | you can change an array element with the index number | You can figure out how many elements an array has with &quot;length&quot; (EX: System.out.println(color.length);) | . Unit 7: ArrayList . Unit 8: 2D Arrary . [row][column] | Basically an array of arrays | Can be declared by data_type[][] array_name = new data_type[x][y]; | . Unit 9: Inheritance . Inheritance can be declared by having a child class extend a parent class | This can be used with the fibonacci sequence mini-lab that we did | This can be useful when you want to inherit the same attributed and methods from another class | &quot;this&quot; vs &quot;super&quot; &quot;this&quot; is used when referring to the current object in the method | &quot;super&quot; is used to call any superclass method like the parent class | . | . Unit 10: Recursions . A method that calls itself | Kind of like a method that&#39;s reflected to each other like two mirrors facing each other | . Project Based Learning Notes . Week 1: Fastpages . _notebooks (.ipynb files which lets you use markdown, java, etc.) | _posts with markdown files that can be used to help fronted designing | _word to save documents to your Fastpages | You can edit the front page with the index.html file | You can edit sub pages with the _pages folder | You can also add images under the images folder | . Week 2 . You can check the versions of different softwares you installed using --version (EX: python --version) for most installations | You can do a lot of frontend work with your different calculators by making a frontend menu that houses them | . Week 3 . AWS stands for amazon web services and is useful as a compiler to amke your local server | . Week 4 . Agile methdology can be used to efficently divide up tasks in the scrum team | The scrum master acts as the leader, in sort, of the group, making sure the roles are being followed and maintaining the scrum board | The DevOps role manages AWS deployment and managing POM files | Frontend developers manages what the audience can see and utilize | Backend developers work more on the programming side although all of the team should be code code codeing | A scrum board can be helpful to manage everyone&#39;s thoughts and ideas in a way that everyone&#39;s voices are heard. It is also a great way to manage tasks for each person in the group and the group itself. | . Week 5 . Started the trimester project | Trying to make the project as real-world applicable as possible while still code code codeing | My group came up with ideas that we narrowed down together until we finally came up with a market specifically meant for DNHS students to utilize | . Week 6 . Working with APL and ASCii | API: (Application programming interface) a way for multiple computer programs to communcate with each other | EX: a weather station has a software to detect weather daily. This can be displayed on the weather app on your phone. The weather app communicates with the weather station&#39;s software program | RapidAPI: Used to connect API&#39;s ## Week 7 ## Week 8 ## Week 9 ## Week 10 ## Week 11 | .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/08/28/CSA-Notes.html",
            "relUrl": "/jupyter/2022/08/28/CSA-Notes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "AP Gov Vocab",
            "content": "Media Bias Notes . Different Types of Media . Print Media | Broadcast Media | Social Media | Talk Radio | The Internet | . Roles of the Media . Gatekeeper: the media determines what issues get attention and for the time frame they do | Watchdog: investigative journalsim: Protects the people and the democracy, find things that the government will never tell us | Score Keeper: can help or hurt certain candidates with the news they report (often during an election) | Agenda Setter: Helps determine the national agenda | . Types of Media Bias . Bias by Ommission | Bias in photos | Bias by Spin | Bias by repitition | Bias by Selection of Sources | Gatekeeping bias | Connotation | Loaded language | .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/08/28/AP-Gov-Notes.html",
            "relUrl": "/jupyter/2022/08/28/AP-Gov-Notes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Primitives Hack Temperature Converter",
            "content": "import java.util.Scanner; public class newPrimatives { public static void main(String[] args) { Scanner keyboard = new Scanner(System.in); System.out.println(&quot;Enter in 1 to convert from Fahrenheit to Celsius or 2 to convert from Celsius to Fahrenheit.&quot;); int conversionDeterminer = keyboard.nextInt(); System.out.println(&quot;Please enter a temperature.&quot;); int originalTemp = keyboard.nextInt(); double convertedTemp; if(conversionDeterminer == 1) { convertedTemp = (originalTemp - 32) * (5.0/9); System.out.println(convertedTemp); } else if(conversionDeterminer == 2) { convertedTemp = originalTemp * (9.0/5) + 32; System.out.println(convertedTemp); } else { System.out.println(&quot;Sorry, that input is not valid. Please try running the program again.&quot;); } } } newPrimatives.main(null); . Enter in 1 to convert from Fahrenheit to Celsius or 2 to convert from Celsius to Fahrenheit. Please enter a temperature. -1.1111111111111112 .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/08/25/Temperature-Converter.html",
            "relUrl": "/jupyter/2022/08/25/Temperature-Converter.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Fastpages Notebook Blog Post",
            "content": "Python Notebook . print(&#39;Hello World&#39;) . Hello World . python --version python2 --version python3 --version . Python 3.9.12 Python 2.7.18 Python 3.9.12 . echo Conda Check . python --version python2 --version . | python --version &#39;;&#39; expected | python2 --version &#39;;&#39; expected | python2 --version not a statement | python --version cannot find symbol symbol: variable python | python --version | python2 --version unreachable statement | python --version | python2 --version missing return statement .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/08/22/python-notebook.html",
            "relUrl": "/jupyter/2022/08/22/python-notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Fastpages Notebook Blog Post",
            "content": "Java Notebook . System.out.println(&quot;Hello World&quot;); System.out.println(&quot;This is my Java Notebook.&quot;); System.out.println(&quot;Welcome!&quot;); . Hello World This is my Java Notebook. Welcome! . python --version python2 --version .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/jupyter/2022/08/22/java-notebook.html",
            "relUrl": "/jupyter/2022/08/22/java-notebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Shraddha's First Post",
            "content": "First Post . Things that I am excited to learn about: . How to create your own blog with Fastpages | More about how computers work | More about how to code using vscode and Jupyter Notebook | . Hello. My name is Shraddha. .",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/markdown/2022/08/22/first-post.html",
            "relUrl": "/markdown/2022/08/22/first-post.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ftc13184-sk.github.io/APCSA-Project/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Code.org Notes",
          "content": "Code.org Unit 1: OOP Key Learning . Methods . . Lesson 7 was a great lesson because it cemented the idea of a method and how it can be used to make an object do things that it couldn’t do before. For example, since the painter only understands the command of turning left, we learned to make a method using three turn lefts to make the painter turn right. | . . Lesson 9 was a great lesson because it focused on the debugging aspect of programming. This step requires a lot of patience because you may have to go through multiple lines and commit many times to discover your error and impliment the correct code. | . . Lesson 13 was a compilation of a lot of the steps we were previously walked through to give us a feel for creating programs more independantly. In this lesson, I saw the importance of pseudocode in making the writing of your code efficient. With psuedocode, you know exactly the steps you are taking with your code and are able to be more productive. | .",
          "url": "https://ftc13184-sk.github.io/APCSA-Project/Code.org%20Notes/",
          "relUrl": "/Code.org Notes/",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "CSA Notes",
          "content": "This is where I will record my notes from CSA. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ftc13184-sk.github.io/APCSA-Project/CSA%20Notes/",
          "relUrl": "/CSA Notes/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ftc13184-sk.github.io/APCSA-Project/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "First Frontpage Test",
          "content": "&lt;!DOCTYPE html&gt; . MarketPlace Homepage . DN MarketPlace . About Us Clothes Supplies Tutoring Other .",
          "url": "https://ftc13184-sk.github.io/APCSA-Project/Frontpage%20Test/",
          "relUrl": "/Frontpage Test/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "Gratitude",
          "content": "Gratitude List . I think this page is going to be great to look back on whenever I’m feeling stressed, overwhelmed, or overall quite down. This part of my blog is designed to make me think more positively and look forward to things in my life :) | . Notes from Psychology and the Good Life . Psychology and the good life is a class that Laurie Santos created at Yale when she realized how unhappy students were | She wanted to teach both the science and practical application of being happy | Specifically, how to change behavior and habits | It takes practice to actually become a happy person and change your behaviors to fit what you are trying to make your new habits | . Things I am greatful for . Music | Books | My friends | My family | ice cream | My scrum team | . Things I am looking forward to . Senior Activities | Graduating | More free time after College Apps | Spending time with my friends | . Happiness Goals . Try to sleep at a set time each day | Try not to procrastinate assignments which lead to less sleep | Make a schedule right after school including daily and weekly assignments | Go outside and get away from technology more (go on walks or exersize) | Spend more time with family and friends | . Monthly Happiness Scale . September: 6: So far pretty happy for some reason. Looking forward to spending more time with friends and reading a book that I just got. Stressed about college apps and getting the essays done for them. | October: | November: | December: | January: | February: | March: | April: | May: | June: | .",
          "url": "https://ftc13184-sk.github.io/APCSA-Project/Code.org%20Notes/",
          "relUrl": "/Code.org Notes/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ftc13184-sk.github.io/APCSA-Project/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}